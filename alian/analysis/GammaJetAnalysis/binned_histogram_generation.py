# This script takes as an argument a ROOT file generated by
# gamma_jet_analysis.py script, creates binnings for each
# 2D and 3D histograms found there, and stores them in a
# TDirectory hierarchy in a new ROOT file (specified with -o)

#!/usr/bin/env python

import argparse
import pandas as pd
import numpy as np
import ROOT
import math

def main():
	parser = argparse.ArgumentParser(description="Convert 2D histograms into 1D histograms in the provided ROOT file generated by gamma_jet_analysis.py.")
	parser.add_argument('input_file', type=str, help="Input file.")
	parser.add_argument("-o", "--output", type=str, help="Output file name.", default="binned_analysis.root")

	args = parser.parse_args()

	pt_bins = [
		(0, 20),
		(20, 40),
		(40, 60),
		(60, 80),
		(0, 1000)
	]

	# initialize an output root file
	tfileIn = ROOT.TFile(args.input_file, "read")
	tfileOut = ROOT.TFile(args.output, "recreate")

	# Iterate over all objects in the TFile and find TDirectories
	for key in tfileIn.GetListOfKeys():
		obj = key.ReadObj()
		if isinstance(obj, ROOT.TDirectory):
			outerDirName = key.GetName()
			print("dir name:", outerDirName)
			tfileOut.mkdir(outerDirName, "", True)
			tfileOut.cd(outerDirName)
			# For each TDirectory, find all underlying TH2F
			for innerKey in obj.GetListOfKeys():
				histObj = innerKey.ReadObj()
				if isinstance(histObj, ROOT.TH2F):
					innerDirName = outerDirName + "/" + innerKey.GetName()
					tfileOut.mkdir(innerDirName, "", True)
					tfileOut.cd(innerDirName)
					print("\thist name:", innerKey.GetName())
					for pt_bin in pt_bins:
						suffix = str(pt_bin[0]) + " GeV - " + str(pt_bin[1]) + " GeV"
						hist = histObj.ProjectionX(suffix, pt_bin[0], pt_bin[1])
						hist.SetTitle(innerKey.GetTitle() + " (" + suffix +")")
						hist.Write()
		elif isinstance(obj, ROOT.TH3F):
			# This must be the delta phi / jet pT / photon pT 3D histogram
			print("Found 3D hist!")
			outerDirName = obj.GetName()
			print(outerDirName)
			tfileOut.mkdir(outerDirName, "", True)
			tfileOut.cd(outerDirName)
			for jet_pt_bin in pt_bins:
				jet_suffix = "Jets " + str(jet_pt_bin[0]) + " GeV - " + str(jet_pt_bin[1]) + " GeV"
				print("\t" + jet_suffix)
				innerDirName = outerDirName + "/" + jet_suffix
				tfileOut.mkdir(innerDirName, "", True)
				tfileOut.cd(innerDirName)
				for photon_pt_bin in pt_bins:
					photon_suffix = "Photons " + str(photon_pt_bin[0]) + " GeV - " + str(photon_pt_bin[1]) + " GeV"
					print("\t\t" + photon_suffix)
					hist = obj.ProjectionX(photon_suffix, jet_pt_bin[0], jet_pt_bin[1], photon_pt_bin[0], photon_pt_bin[1])
					hist.SetTitle("(" + jet_suffix + "), (" + photon_suffix + ")")
					hist.Write()

	tfileOut.cd()

	# close the file
	tfileIn.Close()
	tfileOut.Close()


if __name__ == '__main__':
		main()
